#define DEFAULT 0
#define L_NUMS 1
#define L_MOD 2
#define L_TEXT 3
#define L_CONTROL 4
#define L_MOD_OLD 5

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro
/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <400>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        lh_pht: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 10>;    // <---[[right-hand keys]]
        };
    };
macros {  
#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro
#define HY(keycode) &kp LS(LG(LA(LC(keycode))))

windowm: windowm {
            label = "windowm";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
bindings
    = <&macro_tap &kp RET>
    , <&macro_press &mo L_MOD &kp RGUI>
    , <&macro_pause_for_release>
    , <&macro_release &mo L_MOD &kp RGUI>
    ;
        };
    };
	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
	&kp TAB          &kp Q &kp W &kp E &kp R &kp T                                                                     &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSLH
	&lt L_NUMS ESC &lh_pht LCTL  A    &lh_pht LALT S  &lh_pht LGUI D &lh_pht LSFT F&kp G                                                                     &kp H       &kp J  &kp K     &kp L   &kp SEMI &lt L_NUMS SQT 
	&kp RSHFT       &kp Z &kp X &kp C &kp V &kp B   &kp DEL &kp BSPC						&mo L_TEXT     &kp  C_PLAY_PAUSE &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
	                 &mo L_CONTROL &out OUT_BLE &kp LCTRL &kp LGUI &mt LALT SPACE                 &mt RALT SPACE &lt L_MOD RET  &kp RCTRL &kp RALT &kp PSCRN
			>;
		};
		nums_layer {
			bindings = <
	 &trans &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT								&kp CARET &kp AMPS &kp STAR &kp MINUS &kp EQUAL &kp GRAVE
	 &trans &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                                              &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &trans
	    &trans &kp F1 &kp F2    &kp F3    &kp F4    &kp F5    &kp F6 &trans                               &trans &kp F7    &kp F8    &kp F9  &kp F10   &kp F11 &kp F12 &trans
	                              &trans    &trans &trans  &trans    &trans                             &trans  &kp LBKT &kp RBKT   &kp LPAR    &kp RPAR     
			>;
		};
	
		mod_layer {
			bindings = <
	&trans   &kp RS(RG(Q))    &kp N2    &kp RG(E)  &kp RG(R)    &kp N5                           HY(N1)   HY(N2)    HY(3)   HY(4)    HY(5)   HY(6)
	&trans    &kp RG(S) &kp none &kp RG(F)   &kp N5                                             HY(H)    HY(J)    HY(K)   HY(L)    &kp N0    &trans
	&trans    &trans    &trans    &trans    &kp EQUAL &trans    &trans    &trans      &trans    &trans    HY(LEFT)    HY(DOWN)    HY(UP)   HY(RIGHT) &trans  &trans  
	                              &trans    &trans   &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans    
			>;	
		};
		
		text_layer {
			bindings = <
	&trans    &trans    &trans    &trans    &trans    &trans                                              &kp HOME &kp UP  &kp PG_DN &kp END   &trans    &trans  
	&trans          &trans         &trans          &kp UP          &trans          &trans                                                    &kp LEFT  &kp DOWN  &kp RIGHT &kp PG_UP  &trans    &trans  
	&trans      &trans          &kp LEFT          &kp DOWN         &kp RIGHT          &trans          &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans  
	                                                &trans          &trans          &trans          &trans    &trans      &trans    &trans    &trans    &trans    &trans    
			>;
		};
		control_layer {
			bindings = <
	&bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &out OUT_TOG                                              &kp HOME &kp UP  &kp PG_DN &kp END   &trans    &trans  
	&trans          &ext_power EP_TOG          &trans          &trans          &trans          &trans                                                    &kp LEFT  &kp DOWN  &kp RIGHT &kp PG_UP  &trans    &trans  
	&bt BT_CLR      &rgb_ug RGB_TOG          &trans          &trans          &trans          &trans          &trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans  
	                                                &trans          &trans          &trans          &trans    &trans      &trans    &trans    &trans    &trans    &trans    
			>;
		};
		mod_old_layer {
			bindings = <
	&kp F11   &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                                               AS(RG(N1))    AS(RG(N2))    AS(RG(N3))   AS(RG(N4))    AS(RG(N5))   AS(RG(N6))
	&trans   &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                                              &kp RG(LEFT)    &kp RG(DOWN)    &kp RG(UP)   &kp RG(RIGHT)    &kp N0    &trans
	&trans    &trans    &trans    &trans    &kp EQUAL &trans    &trans    &trans      &trans    &trans    &kp RG(F)   &kp RS(RG(Q)) &kp RG(R)    &kp RG(S)    &kp RG(E)    &trans  
	                              &trans    &trans   &trans    &trans    &trans      &trans    &trans    &trans    &trans    &trans    
			>;	
			};
	};
};
