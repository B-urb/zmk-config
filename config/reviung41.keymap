/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <450>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <120>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | LAYER 1 | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&kp TAB  &kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P  &kp BSLH  &kp ESC  &hm LCTRL A  &hm LALT S  &hm LGUI D  &hm LSHFT F  &kp G  &kp H  &hm RSHFT J  &hm LEFT_GUI K  &hm RALT L  &hm RCTRL SEMICOLON  &kp SQT  &kp LSHFT  &kp Z  &kp X  &kp C  &kp V  &kp B  &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT  &kp TAB  &kp BSPC  &lt 1 SPACE  &lt 2 ENTER  &lt 3 ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        lower {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&kp TAB  &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp CARET  &kp LS(AMPS)  &kp LS(STAR)  &kp MINUS  &kp EQUAL  &kp GRAVE  &kp ESC  &hm LCTRL NUMBER_1  &hm LALT NUMBER_2  &hm LGUI NUMBER_3  &hm LSHFT NUMBER_4  &kp N5  &kp N6  &hm RSHFT N7  &hm LGUI N8  &hm RALT N9  &hm RCTRL N0  &kp SQT  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &kp F8  &kp DELETE  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
            label = "lower";
        };

        Windowman {
            bindings = <
&trans  &kp RG(RS(Q))  &kp RG(E)  &kp RG(E)  &kp RG(R)  &trans  &kp LC(LA(LG(LS(N1))))  &kp LC(LA(LG(LS(N2))))  &kp LC(LA(LG(LS(N3))))  &kp LS(LC(LA(LG(N4))))  &kp LC(LA(LG(LS(N5))))  &kp LS(LC(LA(LG(N6))))  &kp LS(LC(LALT))  &kp LC(LSHFT)  &kp RG(S)  &trans  &kp RG(F)  &trans  &kp LC(LA(LG(LS(H))))  &kp LC(LA(LG(LS(J))))  &kp LC(LA(LG(LS(K))))  &kp LC(LA(LG(LS(L))))  &kp LC(LSHFT)  &kp LCTRL  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LC(LA(LG(LS(LEFT))))  &kp RSHFT  &kp LC(LA(LG(LS(UP))))  &kp LC(LA(LG(LS(RIGHT))))  &trans  &trans  &trans
            >;
        };

        upper {
            bindings = <
&trans  &trans  &trans  &kp TILDE  &kp TILDE  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT  &kp UP  &kp DOWN  &kp RIGHT  &trans  &trans  &kp RSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans  &trans  &trans  &trans  &kp LGUI  &kp RALT  &kp RCTRL  &kp RSHFT  &trans  &trans  &trans  &trans  &trans
            >;

            label = "upper";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        double {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
